apply plugin: 'com.android.library'
apply plugin: 'me.tatarka.retrolambda'
apply plugin: 'com.neenbedankt.android-apt'
apply plugin: 'io.fabric'
apply plugin: 'com.fernandocejas.frodo'
apply plugin: 'com.bmuschko.nexus'

version "0.1.5"

android {
    compileSdkVersion version_sdk_target
    buildToolsVersion version_buildTools

    defaultPublishConfig "debug"

    defaultConfig {
        minSdkVersion version_sdk_min
        targetSdkVersion version_sdk_target
        group  'com.magorasystems.android'
        versionCode gitVersion()
        versionName "${versionMajor}.${versionMinor}.${versionPatch}"
    }
    buildTypes {
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }

        debug {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    packagingOptions {
        exclude 'META-INF/DEPENDENCIES.txt'
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/notice.txt'
        exclude 'META-INF/notice'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/license.txt'
        exclude 'META-INF/license'
    }
    lintOptions {
        abortOnError false
        enable 'BackButton'
        enable 'GradleDynamicVersion'
        enable 'NewerVersionAvailable'

        disable 'MissingTranslation'
        disable 'InvalidPackage'
        disable 'ExtraTranslation'
    }


    dexOptions {
        incremental true
        preDexLibraries = false
        javaMaxHeapSize "4g"
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    retrolambda {
        jdk System.getenv("JAVA8_HOME")
        oldJdk System.getenv("JAVA7_HOME")
        javaVersion JavaVersion.VERSION_1_7
        defaultMethods false
        jvmArgs '-noverify'
        incremental true
    }


    // Always show the result of every unit test, even if it passes.
    testOptions.unitTests.all {
        testLogging {
            events 'passed', 'skipped', 'failed', 'standardOut', 'standardError'
        }
    }

}

modifyPom {
    project {
        name 'Common Module'
        description 'Common Module'
        url 'https://bitbucket.org/magora_karpenko/maf-modules'
        inceptionYear '2016'

        scm{
            url 'https://bitbucket.org/magora_karpenko/maf-modules'
            connection 'scm:https://bitbucket.org/magora_karpenko/maf-modules'
            developerConnection 'scm:https://bitbucket.org/magora_karpenko/maf-modules'

        }

        developers{
            developer {
                id 'karpenko'
                name 'Valentin S.Karpenko'
                email 'karpenko@magora.systems'
            }
        }

        organization {
            name "Magora Systems"
            url "http://magora-systems.com/"
        }
    }
}

extraArchive {
    sources = true
    tests = false
    javadoc = true
}

nexus {
    sign = false
    repositoryUrl = 'http://nexus.java.magora.team/content/repositories/releases/'
    snapshotRepositoryUrl = 'http://nexus.java.magora.team/content/repositories/snapshots/'
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    compile project(path: ':common-network')
    compile project(path: ':common-utils')
    compile project(path: ':common-widgets')
   // compile (group: "com.magorasystems.android", name: "common-utils", version: "$version_maf_utils"){
   //     transitive = true;
   // }
    //compile group: "com.magorasystems.android", name: "common-network", version: "$version_maf_network"

    compile(
            "com.android.support:appcompat-v7:$version_appcompat",
            "com.android.support:cardview-v7:$version_appcompat",
            "com.android.support:recyclerview-v7:$version_appcompat",
            "com.android.support:support-v13:$version_appcompat",
            "com.android.support:design:$version_appcompat",
            "com.android.support:support-annotations:$version_support_annotations"
    )

    compile(
            "com.google.dagger:dagger:$version_dagger",
            "javax.annotation:jsr250-api:$version_jsr250"
    )

    apt "com.google.dagger:dagger-compiler:$version_dagger"

    compile(
            "io.reactivex:rxandroid:$version_rx_android",
            "io.reactivex:rxjava:$version_rx_java",
            "com.jakewharton.rxbinding:rxbinding:$version_rxbinding"
    )

    retrolambdaConfig "net.orfjackal.retrolambda:retrolambda:$version_retrolambda"

    compile("com.crashlytics.sdk.android:crashlytics:$version_crashlytics@aar") {
        transitive = true;
    }

    compile "com.jakewharton:butterknife:$version_butterknife"
    apt "com.jakewharton:butterknife-compiler:$version_butterknife"

    testCompile("junit:junit:$version_junit")

}
